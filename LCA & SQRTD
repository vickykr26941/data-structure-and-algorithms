// nave approach to find the lca(lowest common ancestor)
//time complexity O(n+q*n)
#include<iostream>
#include<vector>
using namespace std;
#define max_n 100
vector<int> tree[max_n];
vector<int> level,parent;
void dfs(int v,int par){
	for(auto u: tree[v]){
		if(u!=par){
			level[u]=level[v]+1;
			parent[u]=v;
			dfs(u,v);
		}
	}
}
int LCA(int x,int y){
	level[1]=1;
	dfs(1,-1);
	if(level[x]>level[y]) swap(x,y);
	int d=level[y]-level[x];
	while(d>0){
		y=parent[y];
		d--;
	}
	if(x==y) return x;
	else{
		while(x!=y){
			x=parent[x];
			y=parent[y];
		}
	  return x;
	}
}
int main(){
	int n;
	cin>>n;
	level.assign(n+1,0);
	parent.assign(n+1,-1);

	for(int i=0; i<n-1; i++){
		int x,y;
		cin>>x>>y;
		tree[x].push_back(y),tree[y].push_back(x);
	}
	int q;
	cin>>q;
	while(q--){
		int l,r;
		cin>>l>>r;
		cout<<LCA(l,r);
	}
	return 0;
}

// binary lifting using dp// time complexity: O(nlogn + q*logn) // nlogn for preprocessing // each query in logn time
#include<iostream>
#include<vector>
#include<math.h>
#define _n 100
#define max_n 10
using namespace std;
int dp[_n][max_n+1];
vector<int> tree[_n],level;
void dfs(int v,int par){
	dp[v][0]=par;
    for(auto u: tree[v]){
    	if(u!=par){
          level[u]=level[v]+1;
          dfs(u,v);
    	}
    }
}
void build_table(int n){
	for(int i=0; i<=n; i++){
		for(int j=0; j<=max_n; j++){
			dp[i][j]=-1;
		}
	}
    level[1]=1;
    dfs(1,-1);
    for(int i=1; i<=max_n; i++){
    	for(int j=1; j<=n; j++){
            if(dp[j][i-1]!=-1){
            	dp[j][i]=dp[dp[j][i-1]][i-1];
            }
    	}
    }
}
int LCA(int x,int y){
	if(level[x]>level[y]) swap(x,y);
	int d=level[y]-level[x];
	while(d>0){
		int i=log2(d);
		y=dp[y][i];
		d-=1<<i;
	}
	if(x==y) return x;
	for(int i=max_n; i>=0; i--){
		if(dp[x][i]!=-1 &&(dp[x][i]!=dp[y][i])){
			x=dp[x][i];
			y=dp[y][i];
		}
	}
	return dp[x][0];
}
int main(){
	int n;
	cin>>n;
	level.assign(_n,0);
	for(int i=0; i<n-1; i++){
		int x,y;
		cin>>x>>y;
		tree[x].push_back(y);
		tree[y].push_back(x);
	}
	build_table(n+1);
	int q;
	cin>>q;
	while(q--){
		int l,r;
		cin>>l>>r;
		cout<<LCA(l,r)<<endl;
	}
	return 0;
// }
// 12
// 1 2
// 1 3
// 2 4
// 2 5
// 3 9
// 3 6
// 6 7
// 6 8
// 9 10
// 9 12
// 10 11

// query to find the maximum distance between two nodes
// dist:level[y]+level[x] -2*level[lca]
#include<iostream>
#include<vector>
#include<math.h>
#define _n 100
#define max_n 10
using namespace std;
vector<int> level,tree[_n];
int dp[_n][max_n+1];
void dfs(int v,int par){
	dp[v][0]=par;
	for(auto u: tree[v]){
		if(u!=par){
			level[u]=level[v]+1;
			dfs(u,v);
		}
	}
}
void build_table(int n){
	for(int i=0; i<=n; i++){
		for(int j=0; j<=max_n; j++){
			dp[i][j]=-1;
		}
	}
    level[1]=1;
    dfs(1,-1);
    for(int i=1; i<=max_n; i++){
    	for(int j=1; j<=n; j++){
    		if(dp[j][i-1]!=-1){
    			dp[j][i]=dp[dp[j][i-1]][i-1];
    		}
    	}
    }
}
int LCA(int x,int y){
	if(level[x]>level[y])
		swap(x,y);
	int d=level[y]-level[x];
	while(d>0){
		int i=log2(d);
		y=dp[y][i];
		d-=1<<i;
	}
	if(x==y) return x;
	for(int i=max_n; i>=0; i--){
		if(dp[x][i]!=-1 && (dp[x][i]!=dp[y][i])){
            x=dp[x][i];
            y=dp[y][i];
		}
	}
	return dp[x][0];
}
int solve(int x,int y){
	// cout<<LCA(x,y)<<endl;
    return level[x] + level[y] - 2*level[LCA(x,y)];
}
int main(){
	int n;
	cin>>n;
	level.assign(_n,0);

	for(int i=0; i<n-1; i++){
		int x,y;
		cin>>x>>y;
		tree[x].push_back(y);
		tree[y].push_back(x);
	}
	build_table(n+1);
	int q;
	cin>>q;
	while(q--){
		int l,r;
		cin>>l>>r;
		cout<<solve(l,r);
	}
	return 0;
} 

//query for given a n-ary tree and two nods x,y find the common element between nodes between x and y for each query
// ans=level[LCA(x,y)] + 1; // level starts to 0// sol:same as previous

// range minimum queries using square root decomposition
#include<iostream>
#include<vector>
#include<math.h>
using namespace std;
typedef long long int ll;
ll inf=1e9;
vector<int> v,arr;
int p;
void solve(vector<int> arr,int n){
     p=sqrt(n + .0) + 1;
     v.assign(p,0);
     for(int i=0; i<n; i++)
     	v[i/p]=min(v[i/p],arr[i]);
}
void update(int x,int val){
	arr[x]=val;
	int l=x/p;
	int e=(a+1)*p-1;
	int s=e-p;
	for(int i=s; i<=e; i++)
		v[l]=min(v[l],arr[i]);
}
int __minquery(int l,int r){
	
    int a=l/p,b=r/p;
    int ans=inf;
    for(int i=l,e=(a+1)*p-1; i<=e; i++)
    	ans=min(ans,arr[i]);
    for(int i=a+1; i<=b-1; i++)
    	ans=min(ans,v[i]);
    for(int i=b*p; i<=r; i++)
    	ans=min(ans,arr[i]);
    return ans;
}
int main(){
	int n;
	cin>>n;
	arr.assign(n,0);
	for(int i=0; i<n; i++)
		cin>>arr[i];
	solve(arr,n);
	int q;
	cin>>q;
	while(q--){
		int code;
		cin>>code;
		if(code==0){
			int l,r;
			cin>>l>>r;
			cout<<__minquery(l,r)<<endl;
		}
		else{
			int x,a;
			cin>>x>>a;
			update(x,a);
		}
	}
	return 0;
}

