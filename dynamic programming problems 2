  // rod cutting recursion debugging and checking
#include<iostream>
#include<vector>
using namespace std;
int rod_cutting(vector<int>& price,int n){
   if(n<=0) return 0;
   int max_val=INT_MIN;
   for(int i=0; i<n; i++){
   	max_val=max(max_val,price[i]+rod_cutting(price,n-i-1));
	}
	cout<<max_val<<" ";
return max_val;
}
int main(){
	int n;
	cin>>n;
	vector<int> arr(n,0);
	for(int i=0; i<n; i++)
	cin>>arr[i];

	cout<<rod_cutting(arr,n);
	return 0;
}

//rod cutting pattern probleam// find the minimum cost to colleect items in a bag
#include<iostream>
#include<vector>
using namespace std;
int min_cost(vector<int>&arr,int n,int w){
     // base case
     if(n<=0) return 0;
     if(w==0) return 0;

    int current_res=INT_MAX;
    for(int i=0; i<n; i++){
         current_res=min(current_res,arr[i]+min_cost(arr,n-i-1,w-i-1));
    }
    return current_res;
}
int main(){
	int n;
	cin>>n;
	vector<int> weight(n,0);
	for(int i=0; i<n; i++){
		cin>>weight[i];
	}

    int w;
    cin>>w;
	cout<<min_cost(weight,n,w);
	return 0;
}



   //longest palindromic substring
#include<iostream>
#include<vector>
#define vii vector<vector<int>>
#define vi vector<int>

using namespace std;
int solve(string s){
	int n=s.size();
	vii v(n,vi(n,0));
	
	int ans=1;
	for(int l=1; l<=n; l++){
		for(int i=0; i<=n-i; i++){
			int j=i+l-1;
			if(l==1){
			 v[i][j]=1;
			}
			else if(l==2){
			 v[i][i+1]= s[i]==s[i+1];
			 ans=2;
			}
			else{
			 if(v[i+1][j-1] && s[i]==s[j]){
			   v[i][j]=1;
			   ans=max(ans,l);
			 }
			}
		}
	}
	return ans;
}
int main(){
	int t;
	cin>>t;
	while(t--){
	  string s;
	  cin>>s;
	  cout<<solve(s)<<endl;
	}
	return 0;
}



#include<iostream>
#include<vector>
#include<math.h>
using namespace std;
int main(){
	int t;
	cin>>t;
	while(t--){
	   int n,k;
	   cin>>n>>k;
	   cout<<k/n<<endl;
	}
	return 0;
}


void solve(){f
 ll n,k; cin>>n>>k;
 vll arr(32,0);
 ll curr = k;
 ll cnt = 0;

 while(curr!=0){
   cnt++;
   arr[lstbt(curr)]++;
   curr = (curr&(curr-1));
 }
 
 if(n<cnt){
   cout<<"-1"<<endl;
   return;
 }
 
 ll diff = n-cnt;
 rf(i,32,0){
   if(diff==0) break;
   else if(i==0){
     cout<<"-1"<<endl;
     return;
   }
   while(arr[i]>0 and diff>0){
     arr[i]--;
     arr[i-1]+=2;
     diff--;
   }
   
 }
  f(i,0,32){
   f(j,0,arr[i]) cout<<char(i+'a');
 }
 cout<<endl;
ll
lstbt(ll val){
ll msk = val&(val-1);
 return log2(val^msk);
 }
 
 f(i,0,32){
   f(j,0,arr[i]) cout<<char(i+'a');
 }
 cout<<endl;
#include<iostream>
#include<vector>
#include<math.h>

#define ll long long
using namespace std;
ll lastbit(ll x){
  ll m = x & ( x - 1);
  return log2(x^m);
}
void solve(ll n, ll k){
  vector<ll> v(32,0);
  
  ll curr=k,cnt=0;
  while(curr!=0){
	  cnt++;
	  v[lastbit(curr)]++;
	  curr = (curr&(curr-1));
  }
  
  if(n<cnt){
	 cout<<-1<<endl;
	 return;
  }
  
  ll diff = n - cnt;
  for(int i=31; i>=0; i--){
	 if(diff==0) break;
	 else if(i==0){
	   cout<<-1<<endl;
	   return;
	 }
	 while(v[i]>0 && diff>0){
	  v[i]--;
	  v[i-1]+=2;
	  diff--;
	 }
  }
  
  for(int i=0; i<32; i++){
	  for(int j=0; j<v[i]; j++){
		  cout<<char(i+'a');
	  }
  }
  cout<<endl;
}
int main(){
	int t;
	cin>>t;
	while(t--){
	   ll n,k;
	   cin>>n>>k;
	  solve(n,k);
	}
	return 0;
}

void solve(){
 ll n,q; cin>>n>>q;
 vpp arr(q); vll res(n+1,0);
 f(i,0,q) cin>>arr[i].ff>>arr[i].ss,arr[i].ss++;
 vector<vll> finish(n+2);
 vll start(n+1,0);
 for(auto elem : arr) finish[elem.ss].pb(elem.ff);
 for(auto elem : arr) start[elem.ff]++;

 ll sum = 0; ll cnt = 0;
 cf(i,1,n){
   ///updation
   cnt+=start[i];
   sum+=(start[i]*i);
   for(auto elem : finish[i]) sum-=elem,cnt--;

   ///answer nikaloonga
   res[i]=(cnt*i-sum+cnt);
 }

 cf(i,1,n) cout<<res[i]<<" ";
 cout<<endl;
}

#include<iostream>
#include<vector>
#define ll long long
using namespace std;
void solve(ll n,ll q){
	 vector<pair<int,int>> arr(q);
	 for(int i=0; i<q; i++){
		cin>>arr[i].first;
		cin>>arr[i].second;
		arr[i].second++;
	 }
	 
	 vector<vector<ll>> f(n+2);
	 vector<ll> s(n+1,0);
	 for(auto e : arr)
		 f[e.second].push_back(e.first);
	 for(auto e : arr) s[e.first]++;

	 ll sum=0,cnt=0;
	 vector<ll> res(n+1,0);
	 for(int i=1; i<=n; i++){
		cnt+=s[i];
		sum+=(s[i] * i);
		for(auto e : f[i])
		   sum-=e,cnt--;

		res[i] = (cnt * i - sum + cnt);
	 }
	 for(int i=1; i<=n; i++)
	  cout<<res[i]<<" ";
	  cout<<endl;
	 
}
int main(){
	int t;
	cin>>t;
	while(t--){
		ll n,q;
		cin>>n>>q;
		solve(n,q);
	}
	return 0;
}

