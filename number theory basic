   // number theory


 //generating primes numbers using seive algorithms in range 0 to n
#include<iostream>
#include<conio.h>
using namespace std;
int main(){
      int n;
      cin>>n;
      int *arr=new int [n];
      for(int i=0; i<=n; i++) arr[i]=1;
      arr[0]=arr[1]=0;
      
   for(int  i=2;i*i<=n; i++){
   	if(arr[i]==1){
   		for(int j=i*i; j<=n; j+=i)
			 arr[j]=0;
		}
	}
	
	  cout<<"all primes numbers till n:";
	  for(int i=2; i<=n; i++)
	    if(arr[i]==1)
	    cout<<i<<" ";
	    
	  return 0;
      
}


  // segmented seive algorithms to generate all the primes in range L to R (in case when R is very large)
  
  
    //segmented seive with extra space 
#include<iostream>
#include<conio.h>
#include<vector>
#include<math.h>
using namespace std;
int main(){
	int l,r;
	cin>>l>>r;
	int n=sqrt(r);                       //algorithms using extra space
	vector<bool> mark(n+1,false);
	vector<int> primes;
	for(int i=2; i<=n; i++){
		if(!mark[i]){
			primes.push_back(i);
			for(int j=i*i; j<=n;j+=i)
			  mark[j]=true;
		}
	}
	
	vector<bool> is_prime(r-l+1,true);
 for(int p:primes){
		if(p*p<r){
			int i=l/p*p;
			if(i<l) i+=p;
			
			for(;i<=r; i+=p){
				is_prime[i-l]=false;
			}
		}
	}
	
	cout<<"all prime numbers in range l to r :";
	for(int i=0; i<is_prime.size();i++){
		if(is_prime[i])
		 cout<<i+l<<"  ";
	}
       
       all primes in range l to r without any extra space
   vector<bool > primes(r-l+1,true);
   for(int i=2; i<=n; i++){
   	for(int j=max(i*i ,(l+i-1)/i*i); j<=r; j+=i){
   		primes[j-l]=false;
		}
	}
	 if(l==1) primes[0]=false;
	   for(int i=0; i<primes.size();i++){
		if(primes[i])
		 cout<<i+l<<"  ";
	}
	
	return 0;
}


       //primility test (naive algorithms )
#include<iostream>
#include<conio.h>
#include<string>
using namespace std;
string is_prime(int n){
	for(int i=2; i*i<=n; i++){
		if(n%i==0) return "not a prime number";
	}
	return "prime number";
}
int main(){
	int n;
	cin>>n;
	cout<<is_prime(n);
	return 0;
}


// prim factrozation of a number
#include<iostream>
#include<conio.h>
using namespace std;
int main(){
	int n;
	cin>>n;
	for(int i=2; i*i<=n; i++){
		if(n%i==0){
			while(n%i==0)
			n/=i,cout<<i<<" ";
		}
	}
	if(n>1) cout<<n<<" ";
	return 0;
}

 //fast prime factrization by skipping the lot (but theoretically the conplecity remail same)
#include<iostream>
#include<conio.h>
using namespace std;
int main(){
	int n;
	cin>>n; 
	while(n%2==0){
		cout<<2<<" ";
		n/=2;
	 }
	 for(int i=3; i*i<=n; i++){
	 	if(n%i==0){
	 		while(n%i==0){
	 			cout<<i<<" ";
	 			n/=i;
			 }
		 }
	 }
	 if(n>1)
	 cout<<n<<" ";
	 
	 return 0;
}

//the above algorithms can be generlize to more
//the idea is to divids all numbrs divisible by 2 3  and 5 now remaining have a pattern   5,7,11,13,17,19,23
// so the algorithms can be more faster than the real time complexity
#include<iostream>
#include<conio.h>
#include<vector>
using namespace std;
int main(){
	int n;
	cin>>n;
	for(int i:{2,3,5}){
		while(n%i==0){
			n/=i,cout<<i<<" ";
		}
	}
	
 vector<int> increment={4, 2, 4, 2, 4, 6, 2, 6};
 int j=0; 
 for(int i=7; i*i<=n; i+=increment[j++]){
 	while(n%i==0){
 		n/=i,cout<<i<<" ";
	  }
	if(j==8) j=0;
 }
 if(n>1) cout<<n<<" ";
 return 0;
}

//even primility test can more optimized using seiv algorithms
// pre compute all the prime numbers till sqrt(n) and chck one by one
#include<iostream>
#include<conio.h>
#include<vector>
using namespace std;
int main()
{
	int n; 
	cin>>n;
	vector<int> seive(n+1,1);
	seive[0]=seive[1]=0;
	for(int i=2; i*i<=n; i++){
		if(seive[i]==1){
			for(int j=i*i; j<=n; j+=i){
				seive[j]=0;
			}
		}
	}
	vector<int> primes;
	for(int i=2; i<=n; i++ )
	if(seive[i]==1)
	 primes.push_back(i);
	 
	for(int b:primes){
		while(n%b==0)
		 n/=b,cout<<b<<" ";
	}
	if(n>1) cout<<n<<" ";
	
 return 0;
}

// floyd cycle dectection algorithms (easy implementation skip it)

//eluer totation function (phi(n):)
//for theory reference: cp algoruthms website
#include<iostream>
#include<conio.h>
using namespace std; 
int phi(int n){
	int res=n;
	for(int i=2; i*i<=n; i++){
		if(n%i==0){
			res/=i;
			res*=(i-1);
			while(n%i==0)
			 n/=i;
		}
	}
	if(n>1)
	res/=n,res*=(n-1);
	return res;
}
int main(){
	int n;
	cin>>n;
	cout<<phi(n)<<endl;
	return 0;
}



//another way to find eluer totian function
#include<iostream>
#include<conio.h>
using namespace std; 
int main(){
	int n;
	cin>>n;
	int result=n;
	for(int i=2; i * i<=n; i++){
	 if(n%i==0){
		while(n%i==0)
		n/=i;
		result-=result/i;
     }
   }
	if(n>1) result-=result/n;
	cout<<result;
	return 0;
}

// seive of eluer totuan function
#include<iostream>
#include<conio.h>
#include<vector>
using namespace std;
int main(){
	int n; 
	cin>>n;
	vector<int> phi(n+1);
	for(int i=2;i<=n; i++) phi[i]=i;
	phi[0]=0;
	phi[1]=1;
	for(int i=2; i<=n; i++){
		if(phi[i]==i){
			for(int j=i;j<=n; j+=i)
			phi[j]-=phi[j]/i;
		}
	}
	for(int i=0; i<=n;i++)
	cout<<phi[i]<<" ";
	
	return 0;
}

  //counting total number of divisor of a number(using prime factrazition)
#include<iostream>
#include<conio.h>
using namespace std; 
int main(){
	int n;
	cin>>n;
	int div_count=1;
	for(int i=2;i*i<=n; i++){
		int cnt=0;
		if(n%i==0){
			while(n%i==0)
			n/=i,cnt++;
			div_count*=(cnt+1);
		}
	}
	if(n>1) div_count+=2;
	
	cout<<div_count<<" ";
	return 0;
}


