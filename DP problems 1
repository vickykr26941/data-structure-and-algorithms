// All Basic Problems
//standard dynamic programming problems

//find the no.of ways to reach from u to v with exectly k edges in graph
#include<bits/stdc++.h>
#define ll            long long int
#define vi            vector<int>
#define vii           vector<vector<int>>
#define vl            vector<ll>
#define vll           vector<vector<ll>> 
using namespace std;

         // brute force solution walt form each vertex and check 
int solve(vii&graph,int v,int d,int k){
	if(v==d && k==0){
		return 1;
	}else if(k<=0) return 0;
	int cnt = 0;
	for(int i=0; i<graph[v].size(); i++){
		cnt +=solve(graph,graph[v][i],d,k-1);
	}
	return cnt;
}
void test_case(){
	int n,m,k; cin>>n>>m>>k;
	vii graph(n,vi(m,0));
	for(int i=0; i<n; i++){
		for(int j=0; j<m; j++){
			cin>>graph[i][j];
		}
	}
    
	int src,dest;
	cin>>src>>dest;
	cout<<solve(graph,src,dest,k);
}
int main(){
	int t; cin>>t;
	while(t--){
		test_case();
		cout<<"\n";
	}
	return 0;
}

// optimized above problem using dynamic programming or divide and concor techniques



// deragnment (!arrangnement) // 
// using dynamic programming
#include<bits/stdc++.h> 
#define ll long long 
#define pb(i) push_back(i)
#define vii vector<vector<int>> 
#define vi vector<int> 
#define vll vector<vector<ll>> 
using namespace std;
const int inf = 1e9 + 7;
int solve(int n){
	vi dp(n+1,0);
	dp[0] = 0,dp[1] = 0,dp[2] = 1;
	for(int i=3; i<=n; i++){
		dp[i] =((i-1)*(dp[i-1] + dp[i-2]));
	}
	return dp[n];
}
void test_case(){
	int n; cin>>n;
	cout<<solve(n)<<endl;
}

int main(){
	ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
  
    int t = 1;  cin>>t;
    while(t--){
    	test_case();
    	//cout<<"\n";
    }
    return 0;
}

// fint the total n digit number whose sum is K
// recursive solution 
#include<bits/stdc++.h> 
#define ll long long 
#define pb(i) push_back(i)
#define vii vector<vector<int>> 
#define vi vector<int> 
#define vll vector<vector<ll>> 
using namespace std;
const int inf = 1e9 + 7;

int solve(int n,int k){
    if(n<0 or k<0) return 0;
    if(n==0) return k==0;
    if(k==0) return 1;
    ll ans = 0;
    for(int i=0; i<=9; i++){
    	ans+=solve(n-1,k-i);
    }
    return ans;
}
void test_case(){
	int n,k; cin>>n>>k;
	int ans = 0;
	for(int i=1; i<=9; i++){
		ans +=solve(n-1,k-i);
	}
	cout<<ans<<endl;
}

int main(){
	ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
  
    int t = 1;  cin>>t;
    while(t--){
    	test_case();
    	//cout<<"\n";
    }
    return 0;
}


 // dp solution 
#include<bits/stdc++.h> 
#define ll long long 
#define pb(i) push_back(i)
#define vii vector<vector<int>> 
#define vi vector<int> 
#define vll vector<vector<ll>> 
using namespace std;
const int inf = 1e9 + 7;
int solve(int n,int k){

	vii dp(n+1,vi(k+1,0));
	dp[0][0] = 1;
	for(int i=0; i<=n; i++)
		dp[i][0] = 1;
	for(int i=1; i<=n; i++){
		for(int j=1; j<=k; j++){
			for(int d = 0; d<=9; d++){
				if(j-d>=0){
					dp[i][j] +=dp[i-1][j-d];
				}
			}
		}
	}

	return dp[n][k];
}
void test_case(){
	int n,k; cin>>n>>k;
	// dp[i][j] = i-digit number with sum j 
	int ans = 0;
	for(int i=1; i<=9; i++){
		if(k-i>=0){
			ans+=solve(n-1,k-i);
		}
	}
	cout<<ans<<endl;
}

int main(){
	ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
  
    int t = 1;  cin>>t;
    while(t--){
    	test_case();
    	//cout<<"\n";
    }
    return 0;
}

// greedy solution for the above problem 
#include<bits/stdc++.h> 
#define ll long long 
#define pb(i) push_back(i)
#define vii vector<vector<int>> 
#define vi vector<int> 
#define vll vector<vector<ll>> 
using namespace std;
const int inf = 1e9 + 7;
void test_case(){
	int n,k; cin>>n>>k;
	ll start = pow(10,n-1);
	ll end   = pow(10,n)-1;
	
	ll i = 0,ans = 0;
	while(start<=end){
		ll x = start,cnt = 0;
		while(x>0){
			cnt+=x%10;
			x /= 10;
		}
		if(cnt==k){
			ans++;
			start+=9;
		}else{
			start +=1;
		}
	}
	cout<<ans<<endl;
}

int main(){
	ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
  
    int t = 1;  cin>>t;
    while(t--){
    	test_case();
    	//cout<<"\n";
    }
    return 0;
}

// rod cutting problem 
#include<bits/stdc++.h> 
#define ll long long 
#define pb(i) push_back(i)
#define vii vector<vector<int>> 
#define vi vector<int> 
#define vll vector<vector<ll>> 
using namespace std;
const int inf = 1e9 + 7;
int solve(vi&v,int n){
    
    if(n<=0)
    	return 0;
	int ans = 0;
	for(int i=0; i<n; i++){
		ans = max(ans,v[i]+solve(v,n-i-1));
	}
	return ans;
}
void test_case(){
	int n; cin>>n;
	vi v(n,0);
	for(int i=0; i<n; i++)
		cin>>v[i];
	cout<<solve(v,n)<<endl;
}

int main(){
	ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
  
    int t = 1;  cin>>t;
    while(t--){
    	test_case();
    	//cout<<"\n";
    }
    return 0;
}

// dynamic programming rod cutting 

#include<bits/stdc++.h> 
#define ll long long 
#define pb(i) push_back(i)
#define vii vector<vector<int>> 
#define vi vector<int> 
#define vll vector<vector<ll>> 
using namespace std;
const int inf = 1e9 + 7;
void test_case(){
	int n; cin>>n;
	vi v(n,0);
	for(int i=0; i<n; i++)
		cin>>v[i];
	vi dp(n+1,0);
	dp[0] = 0;
	for(int i=1; i<=n; i++){
		// cut from every places below it
		for(int j=0; j<i; j++){ 
			dp[i] = max(dp[i],dp[i-j-1] + v[j]);
		}
	}
	cout<<dp[n]<<" ";
}

int main(){
	ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
  
    int t = 1;  cin>>t;
    while(t--){
    	test_case();
    	//cout<<"\n";
    }
    return 0;
}

// maximum product cutting (same as previous one) 
// find the maximum product by cutting the rod
// 1
// 8
// 1 5 8 9 10 17 17 20

#include<bits/stdc++.h> 
#define ll long long 
#define pb(i) push_back(i)
#define vii vector<vector<int>> 
#define vi vector<int> 
#define vll vector<vector<ll>> 
using namespace std;
const int inf = 1e9 + 7;
int max_(int a,int b,int c){
	return max(max(a,b),c);
}
void test_case(){
	int n; cin>>n;
	vi v(n+1,0);
	v[0] = v[1] = 1;
	v[2] = 2;
	// for(int i=3; i<=n; i++){
	// 	for(int j=1; j<i; j++){
	// 		v[i] = max(v[i],v[i-j]*j);
	// 	}
	// }
	// cout<<v[n]<<endl;

	// time complexity can be recude 
	for(int i=3; i<=n; i++){
		for(int j=1; j<=n/2; j++){
          v[i] = max_(v[i],v[i-j]*j,(i-j)*j);
		}
	}
	cout<<v[n]<<endl;
}

int main(){
	ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
  
    int t = 1;  cin>>t;
    while(t--){
    	test_case();
    	//cout<<"\n";
    }
    return 0;
}

maximized profit from sales of wine
#include<bits/stdc++.h>
#define vi vector<int> 
using namespace std;

// recursive solution 
// int solve(vi& v,int i,int n,int y){
// 	if(i>=n or n<=0) return 0;
// 	if(i==n){
// 		return v[i]*y;
// 	}
// 	int x1 = v[i]*y + solve(v,i+1,n,y+1);
// 	int x2 = v[n-1]*y + solve(v,i,n-1,y+1);
// 	return max(x1,x2);
// }

// int solve(vi& v,int i,int n,int N){
// 	int y = N - (n-1-i);
// 	if(i>=n or n<=0) return 0;
// 	if(i==n-1){
// 		return v[i]*y;
// 	}
// 	int x1 = v[i]*y + solve(v,i+1,n,N);
// 	int x2 = v[n-1]*y + solve(v,i,n-1,N);
// 	return max(x1,x2);
// }
void test_case(){
	int n; cin>>n;
	vi v(n,0);
	for(int i=0; i<n; i++)
		cin>>v[i];
	// cout<<solve(v,0,n,n);

}
int main(){
	int t; cin>>t;
	while(t--){
		test_case();
		cout<<'\n';
	}
	return 0;
}

// subset sum problem (given a array find the subset with given sum)
#include<bits/stdc++.h>
#define vi vector<int> 
using namespace std;
bool solve(vi&v,int n,int s){
	if(n<=0 or s<0) return false;
	if(s==0) return true;
	return solve(v,n-1,s-v[n-1]) || solve(v,n-1,s);
}
void test_case(){
	int n; cin>>n;
	vi v(n,0);
	for(int i=0; i<n; i++)
		cin>>v[i];
	// recursive solution 
	int s; cin>>s;
	// cout<<solve(v,n,s);  // ans 0 or 1
	// buttom up solution 
	vector<vector<bool>> dp(n+1,vector<bool>(s+1,false));
	for(int i=1; i<=n; i++){
		for(int j=0; j<=s; j++){
			if(j==0) dp[i][j]=true;
			else{
				if((j-v[i-1])>=0)
					dp[i][j] = dp[i-1][j] || dp[i][j-v[i-1]];
				else{
					dp[i][j] = dp[i-1][j];
				}
			}
		}
	}
	cout<<dp[n][s];
}
int main(){
	int t; cin>>t;
	while(t--){
		test_case();
		cout<<'\n';
	}
	return 0;
}


// maximum size subset with given sum 
#include<bits/stdc++.h>
#define vi vector<int> 
#define vii vector<vector<int>> 
using namespace std;
void test_case(){
	int n; cin>>n;
	vi v(n,0);
	for(int i=0; i<n; i++)
		cin>>v[i];

	int s; cin>>s;
	vii dp(n+1,vi(s+1,0));
	vii cnt(n+1,vi(s+1,0));

	for(int i=1; i<=n; i++){
		for(int j=0; j<=s; j++){
			if(j==0) 
				dp[i][j] = 1;
			else{
				dp[i][j] = dp[i-1][j];
				cnt[i][j] = cnt[i-1][j];
				if((j-v[i-1])>=0){
					dp[i][j] = dp[i-1][j] || dp[i][j-v[i-1]];
					if(dp[i][j]==1)
						cnt[i][j] = max(cnt[i-1][j],cnt[i][j-v[i-1]] + 1);
				}
			}
		}
	}
	cout<<cnt[n][s];
}
int main(){
	int t; cin>>t;
	while(t--){
		test_case();
		cout<<'\n';
	}
	return 0; 
}

// maximum and minimum value of an algebric equation 

// maximum average sum partition of an array
#include<bits/stdc++.h>
#define vi vector<int> 
#define vii vector<vector<int>> 
#define ll long long
using namespace std;
vector<vector<double>> dp;
int solve(vi& v,int n,int k){
	if(dp[n][k]>0)
		return dp[n][k];
	double s = 0;
	for(int i=n-1; i>0; i--){
		s+=v[i];
		dp[n][k] = max(dp[n][k],solve(v,i,k-1) + (s/(n-i)));
	}
	return dp[n][k];
}
void test_case(){
	int n,K; cin>>n>>K;
	vi v(n,0);
	for(int i=0; i<n; i++)
		cin>>v[i];
	double s = 0;
	//dp.assign(1000,vector<double>(1000,0));
	// for(int i=0; i<n; i++){
	// 	s+=v[i];
	// 	dp[i+1][1] = s/(i+1);
	// }
	// cout<<solve(v,n,k);

	// buttom up approach 
	vector<int> dp(n+1,0);
	for(int i=1; i<n; i++)
		v[i]+=v[i-1];
	for(int i=0; i<n; i++){
		dp[i] = (v[n-1] -v[i])/(n-i);
	}
	for(int k=0; k<K; k++){
		for(int i=0; i<n; i++){
			for(int j=i+1; j<n; j++){
				dp[i] = max(dp[i],(v[j] - v[i])/(j-i) + dp[j]);
			}
		}
		//if(k>=1) break;
	}
	cout<<dp[0]<<endl;

}
int main(){
	int t; cin>>t;
	while(t--){
		test_case();
		cout<<'\n';
	}
	return 0;
}

// Partition an array such into maximum increasing segments
#include<bits/stdc++.h>
#define vi vector<int> 
#define vii vector<vi>
using namespace std;
const int inf = 1e9 + 7;
void test_case(){
	int n; cin>>n;
	vi v(n,0);
	for(int i=0; i<n; i++)
		cin>>v[i];
	vi h(n+1,0);
	h[n] = inf;

	int partition = 0;
	for(int i= n-1; i>=0; i--)
		h[i] = min(h[i+1],h[i]);
	for(int mx = v[0],i = 0; i<n; i++){
		mx = max(mx,v[i]);
		if(mx<=h[i+1])
			partition++;
	}
	cout<<partition;
}

int main(){
	int t; cin>>t;
	while(t--){
		test_case();
		cout<<'\n';
	}
	return 0;
}


// partition the array into three equal sum segment 
#include<bits/stdc++.h>
#define vi vector<int>
#define vii vector<vi>
#define pb(i) push_back(i)
using namespace std;
void test_case(){
	int n; cin>>n;
	vi v(n,0);
	for(int i=0; i<n; i++)
		cin>>v[i];

	vi pre(n,0);
	pre[0] = v[0];
	for(int i=1; i<n; i++)
		pre[i] = pre[i-1] + v[i];
	int l=0,r = 0;
	bool f=false,s = false,t;
	vi a,b,c;

	for(int k=1; k<n; k++){
		if(!f) a.pb(v[k]);
		if(f && !s) b.pb(v[k]);
		if(f && s && !t) c.pb(v[k]);

		if(pre[k]*2==(pre[n-1]-pre[k])){
			l = k;
			f = true;
		}
		if(pre[k]==2*(pre[n-1] - pre[k])){
			r = k;
			s = true;
		}
	}
	if(!a.size() || !b.size() || !c.size())
		cout<<"partition not possible";
	else{
		for(int i=0; i<a.size(); i++)
			cout<<a[i]<<" ";
		cout<<'\n';
		for(int i=0; i<b.size(); i++)
			cout<<b[i]<<" ";
		cout<<'\n';
		for(int i=0; i<c.size(); i++)
			cout<<c[i]<<" ";
	}
}
int main(){
	int t; cin>>t;
	while(t--){
		test_case();
		cout<<"\n";
	}
	return 0;
}

// maximized array elements up to given element
#include<bits/stdc++.h> 
using namespace std;
void depth_first_search(vector<vector<int>>&graph,int v,int p,int w,int &ans){
	int size = graph[v].size();
	if(size==0) return;
	else if(w%size==0)
		w = w/size;
	else if(w%size>=1){
		ans+=w;
		return;
	}
	for(auto u : graph[v]){
		if(u==p) continue;
		depth_first_search(graph,u,v,w,ans);
	}
}
void testCase(){
	int n; cin>>n;
	vector<vector<int>> g(n+2);
	vector<int> par(n+2,0);
	int x; 
	for(int i=1; i<n; i++){
		cin>>x;
		g[x].push_back(i+1);
		par[i+1] = x;
	}
	par[1] = -1;
	int q; cin>>q;
	while(q--){
		int v,w; cin>>v>>w;
		int result = 0;
		depth_first_search(g,v,par[v],w,result);
		cout<<result<<endl;
	}

}
int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

    int t = 1;  //cin>>t;
    while(t--){
    	testCase();
    	cout<<'\n';
    }
    return 0;
}

